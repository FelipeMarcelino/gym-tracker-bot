name: CI/CD Pipeline

# Workflow triggers:
# - Push to main: Full pipeline (test ‚Üí build ‚Üí deploy)
# - Push to develop: Test + build (staging image)
# - Push to claude/** branches: Tests only
# - Pull requests: Tests + build validation (no push)
on:
  push:
    branches:
      - main
      - develop
      - 'claude/**'
  pull_request:
    branches:
      - main
      - develop

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ['3.13']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio pytest-cov
          pip install -r requirements.txt

      - name: Run linting (optional)
        continue-on-error: true
        run: |
          pip install flake8
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run unit tests
        run: |
          python run_tests.py unit -v

      - name: Run integration tests
        run: |
          python run_tests.py integration -v

      - name: Generate coverage report
        if: matrix.python-version == '3.13'
        run: |
          python -m pytest tests/ \
            --cov=src \
            --cov-report=xml \
            --cov-report=term-missing

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.13'
        uses: codecov/codecov-action@v4
        continue-on-error: true
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Validate Docker build on PRs (doesn't push)
  build-pr:
    name: Validate Docker Build (PR)
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (validation only)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: gym-tracker-bot:pr-${{ github.event.pull_request.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Build and push on main/develop
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=staging,enable=${{ github.ref == 'refs/heads/develop' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Deploy only on main (production)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Op√ß√£o 1: Deploy para Railway
      - name: Deploy to Railway
        if: vars.DEPLOY_PLATFORM == 'railway'
        run: |
          echo "Deploy to Railway would happen here"
          echo "Install Railway CLI and run: railway up"
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

      # Op√ß√£o 2: Deploy para Render
      - name: Deploy to Render
        if: vars.DEPLOY_PLATFORM == 'render'
        run: |
          echo "Deploy to Render would happen here"
          echo "Use Render's webhook or API to trigger deployment"
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}

      # Op√ß√£o 3: Deploy para VPS via SSH
      - name: Deploy to VPS
        if: vars.DEPLOY_PLATFORM == 'vps'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd ~/gym-tracker-bot
            git pull origin main
            docker compose pull
            docker compose up -d --force-recreate

      # Op√ß√£o 4: Deploy para Fly.io
      - name: Deploy to Fly.io
        if: vars.DEPLOY_PLATFORM == 'flyio'
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy to Fly.io (continued)
        if: vars.DEPLOY_PLATFORM == 'flyio'
        run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    if: always() && vars.ENABLE_TELEGRAM_NOTIFICATIONS == 'true'

    steps:
      - name: Send Telegram notification
        run: |
          MESSAGE="ü§ñ Gym Tracker Bot CI/CD Update

          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}

          Tests: ${{ needs.test.result }}
          Build: ${{ needs.build.result }}
          Deploy: ${{ needs.deploy.result }}

          Author: ${{ github.actor }}
          "

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_NOTIFY_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_NOTIFY_CHAT_ID }}" \
            -d text="$MESSAGE"
