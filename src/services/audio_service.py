import os
import tempfile

from faster_whisper import WhisperModel  # ‚Üê MUDOU

from config.settings import settings


class AudioTranscriptionService:
    """Servi√ßo para transcrever √°udios usando Faster-Whisper"""

    def __init__(self, model_name: str = "base"):
        """Inicializa o Faster-Whisper
        
        Modelos dispon√≠veis:
        - tiny: Mais r√°pido (~1GB RAM)
        - base: Bom balan√ßo (recomendado) (~1GB RAM)
        - small: Melhor qualidade (~2GB RAM)
        - medium: Alta qualidade (~5GB RAM)
        - large-v3: M√°xima qualidade (~10GB RAM)
        """
        print(f"üîÑ Carregando Faster-Whisper '{model_name}'...")

        # device="cpu" ou device="cuda" se tiver GPU
        self.model = WhisperModel(
            model_name,
            device="cpu",
            compute_type="int8",  # Mais r√°pido em CPU
        )

        print(f"‚úÖ Faster-Whisper '{model_name}' carregado!")

    async def transcribe_telegram_voice(self, file_bytes: bytes) -> str:
        """Transcreve um √°udio do Telegram (bytes) sem salvar permanentemente
        
        Args:
            file_bytes: Bytes do arquivo de √°udio
            
        Returns:
            Texto transcrito

        """
        # Criar arquivo tempor√°rio
        with tempfile.NamedTemporaryFile(delete=False, suffix=".ogg") as temp_file:
            temp_file.write(file_bytes)
            temp_path = temp_file.name

        try:
            print("üé§ Transcrevendo √°udio...")

            # Transcrever (retorna generator)
            segments, info = self.model.transcribe(
                temp_path,
                language="pt",
                beam_size=5,
                vad_filter=True,  # Remove sil√™ncios
            )

            # Juntar todos os segmentos
            transcription = " ".join([segment.text for segment in segments]).strip()

            print(f"‚úÖ Transcri√ß√£o completa: {len(transcription)} caracteres")

            return transcription

        finally:
            # Deletar arquivo tempor√°rio
            try:
                os.unlink(temp_path)
            except:
                pass

# Inst√¢ncia global (Singleton pattern)
_audio_service = None

def get_audio_service() -> AudioTranscriptionService:
    """Retorna inst√¢ncia √∫nica do servi√ßo de √°udio"""
    global _audio_service
    if _audio_service is None:
        _audio_service = AudioTranscriptionService(
            model_name=settings.WHISPER_MODEL,
        )
    return _audio_service
